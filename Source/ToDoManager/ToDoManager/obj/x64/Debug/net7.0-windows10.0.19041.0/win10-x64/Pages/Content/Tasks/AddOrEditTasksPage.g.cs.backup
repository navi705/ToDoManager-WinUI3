#pragma checksum "C:\Users\vrclu\source\repos\ToDoManager\ToDoManager\Pages\Content\Tasks\AddOrEditTasksPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "64A9DA20F7E80897D6F9E4C63304876DA741E5FBDBC476896F1A518310061603"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ToDoManager.Pages
{
    partial class AddOrEditTasksPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_TextBox_Text(global::Microsoft.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TimePicker_SelectedTime(global::Microsoft.UI.Xaml.Controls.TimePicker obj, global::System.Nullable<global::System.TimeSpan> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.TimeSpan) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.TimeSpan), targetNullValue);
                }
                obj.SelectedTime = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_DatePicker_Date(global::Microsoft.UI.Xaml.Controls.DatePicker obj, global::System.DateTimeOffset value)
            {
                obj.Date = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedValue(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedValue = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class AddOrEditTasksPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IAddOrEditTasksPage_Bindings
        {
            private global::ToDoManager.Pages.AddOrEditTasksPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.TextBox obj2;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj3;
            private global::Microsoft.UI.Xaml.Controls.TimePicker obj4;
            private global::Microsoft.UI.Xaml.Controls.DatePicker obj5;
            private global::Microsoft.UI.Xaml.Controls.ComboBox obj6;
            private global::Microsoft.UI.Xaml.Controls.ComboBox obj7;
            private global::Microsoft.UI.Xaml.Controls.Button obj8;
            private global::Microsoft.UI.Xaml.Controls.Button obj9;
            private global::Microsoft.UI.Xaml.Controls.Button obj10;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2TextDisabled = false;
            private static bool isobj3TextDisabled = false;
            private static bool isobj4SelectedTimeDisabled = false;
            private static bool isobj5DateDisabled = false;
            private static bool isobj6SelectedValueDisabled = false;
            private static bool isobj7SelectedValueDisabled = false;
            private static bool isobj8CommandDisabled = false;
            private static bool isobj9CommandDisabled = false;
            private static bool isobj10CommandDisabled = false;

            private AddOrEditTasksPage_obj1_BindingsTracking bindingsTracking;

            public AddOrEditTasksPage_obj1_Bindings()
            {
                this.bindingsTracking = new AddOrEditTasksPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 28 && columnNumber == 47)
                {
                    isobj2TextDisabled = true;
                }
                else if (lineNumber == 29 && columnNumber == 48)
                {
                    isobj3TextDisabled = true;
                }
                else if (lineNumber == 30 && columnNumber == 34)
                {
                    isobj4SelectedTimeDisabled = true;
                }
                else if (lineNumber == 31 && columnNumber == 105)
                {
                    isobj5DateDisabled = true;
                }
                else if (lineNumber == 33 && columnNumber == 87)
                {
                    isobj6SelectedValueDisabled = true;
                }
                else if (lineNumber == 45 && columnNumber == 90)
                {
                    isobj7SelectedValueDisabled = true;
                }
                else if (lineNumber == 53 && columnNumber == 63)
                {
                    isobj8CommandDisabled = true;
                }
                else if (lineNumber == 54 && columnNumber == 67)
                {
                    isobj9CommandDisabled = true;
                }
                else if (lineNumber == 55 && columnNumber == 66)
                {
                    isobj10CommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 28
                        this.obj2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_2(this.obj2);
                        break;
                    case 3: // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 29
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 30
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TimePicker>(target);
                        this.bindingsTracking.RegisterTwoWayListener_4(this.obj4);
                        break;
                    case 5: // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 31
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.DatePicker>(target);
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    case 6: // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 33
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_6(this.obj6);
                        break;
                    case 7: // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 45
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_7(this.obj7);
                        break;
                    case 8: // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 53
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 9: // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 54
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 10: // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 55
                        this.obj10 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IAddOrEditTasksPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::ToDoManager.Pages.AddOrEditTasksPage>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::ToDoManager.Pages.AddOrEditTasksPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::ToDoManager.ViewModels.AddOrEditTasksViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Task(obj.Task, phase);
                        this.Update_ViewModel_Time(obj.Time, phase);
                        this.Update_ViewModel_Date(obj.Date, phase);
                        this.Update_ViewModel_AutoSkip(obj.AutoSkip, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SaveData(obj.SaveData, phase);
                        this.Update_ViewModel_DeleteTask(obj.DeleteTask, phase);
                        this.Update_ViewModel_ToTaskPage(obj.ToTaskPage, phase);
                    }
                }
            }
            private void Update_ViewModel_Task(global::ToDoManager.Models.ToDoTask obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Task_Name(obj.Name, phase);
                        this.Update_ViewModel_Task_Description(obj.Description, phase);
                        this.Update_ViewModel_Task_Reapet(obj.Reapet, phase);
                    }
                }
            }
            private void Update_ViewModel_Task_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 28
                    if (!isobj2TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj2, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Task_Description(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 29
                    if (!isobj3TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Time(global::System.TimeSpan obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 30
                    if (!isobj4SelectedTimeDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TimePicker_SelectedTime(this.obj4, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Date(global::System.DateTimeOffset obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 31
                    if (!isobj5DateDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_DatePicker_Date(this.obj5, obj);
                    }
                }
            }
            private void Update_ViewModel_Task_Reapet(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 33
                    if (!isobj6SelectedValueDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedValue(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_AutoSkip(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 45
                    if (!isobj7SelectedValueDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedValue(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SaveData(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 53
                    if (!isobj8CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DeleteTask(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 54
                    if (!isobj9CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj9, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ToTaskPage(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 55
                    if (!isobj10CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj10, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_2_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.Task != null)
                            {
                                this.dataRoot.ViewModel.Task.Name = this.obj2.Text;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_3_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.Task != null)
                            {
                                this.dataRoot.ViewModel.Task.Description = this.obj3.Text;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_4_SelectedTime()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Time = (global::System.TimeSpan)this.obj4.SelectedTime;
                        }
                    }
                }
            }
            private void UpdateTwoWay_5_Date()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Date = this.obj5.Date;
                        }
                    }
                }
            }
            private void UpdateTwoWay_6_SelectedValue()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.Task != null)
                            {
                                this.dataRoot.ViewModel.Task.Reapet = (global::System.String)this.obj6.SelectedValue;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_7_SelectedValue()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.AutoSkip = (global::System.String)this.obj7.SelectedValue;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class AddOrEditTasksPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<AddOrEditTasksPage_obj1_Bindings> weakRefToBindingObj; 

                public AddOrEditTasksPage_obj1_BindingsTracking(AddOrEditTasksPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<AddOrEditTasksPage_obj1_Bindings>(obj);
                }

                public AddOrEditTasksPage_obj1_Bindings TryGetBindingObject()
                {
                    AddOrEditTasksPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AddOrEditTasksPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::ToDoManager.ViewModels.AddOrEditTasksViewModel obj = sender as global::ToDoManager.ViewModels.AddOrEditTasksViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Task(obj.Task, DATA_CHANGED);
                                bindings.Update_ViewModel_Time(obj.Time, DATA_CHANGED);
                                bindings.Update_ViewModel_Date(obj.Date, DATA_CHANGED);
                                bindings.Update_ViewModel_AutoSkip(obj.AutoSkip, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Task":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Task(obj.Task, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Time":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Time(obj.Time, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Date":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Date(obj.Date, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AutoSkip":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_AutoSkip(obj.AutoSkip, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::ToDoManager.ViewModels.AddOrEditTasksViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::ToDoManager.ViewModels.AddOrEditTasksViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void RegisterTwoWayListener_2(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_2_Text();
                        }
                    };
                }
                public void RegisterTwoWayListener_3(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_Text();
                        }
                    };
                }
                public void RegisterTwoWayListener_4(global::Microsoft.UI.Xaml.Controls.TimePicker sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TimePicker.SelectedTimeProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_4_SelectedTime();
                        }
                    });
                }
                public void RegisterTwoWayListener_5(global::Microsoft.UI.Xaml.Controls.DatePicker sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.DatePicker.DateProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_Date();
                        }
                    });
                }
                public void RegisterTwoWayListener_6(global::Microsoft.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedValueProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_6_SelectedValue();
                        }
                    });
                }
                public void RegisterTwoWayListener_7(global::Microsoft.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedValueProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_7_SelectedValue();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Pages\Content\Tasks\AddOrEditTasksPage.xaml line 4
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    AddOrEditTasksPage_obj1_Bindings bindings = new AddOrEditTasksPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

